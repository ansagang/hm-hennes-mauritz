{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useLayoutEffect } from 'react';\nconst isBrowser = typeof window !== `undefined`;\n\nfunction getScrollPosition({\n  element,\n  useWindow\n}) {\n  if (!isBrowser) return {\n    x: 0,\n    y: 0\n  };\n  const target = element ? element.current : document.body;\n  const position = target.getBoundingClientRect();\n  return useWindow ? {\n    x: window.scrollX,\n    y: window.scrollY\n  } : {\n    x: position.left,\n    y: position.top\n  };\n}\n\nexport default function useScrollPosition(effect, deps, element, useWindow, wait) {\n  _s();\n\n  const position = useRef(getScrollPosition({\n    useWindow\n  }));\n  let throttleTimeout = useRef(null);\n\n  const callBack = () => {\n    const currPos = getScrollPosition({\n      element,\n      useWindow\n    });\n    effect({\n      prevPos: position.current,\n      currPos\n    });\n    position.current = currPos;\n    throttleTimeout = null;\n  };\n\n  useLayoutEffect(() => {\n    const handleScroll = () => {\n      if (wait) {\n        if (throttleTimeout.current === null) {\n          throttleTimeout.current = setTimeout(callBack, wait);\n        }\n      } else {\n        callBack();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  });\n}\n\n_s(useScrollPosition, \"3fFhC4z4cUB4zmPuPHKiibBcruY=\");","map":{"version":3,"sources":["C:/Users/Ансар/Documents/FBMD/Front-End/react/hm-hennes-mauritz-team-three/src/hooks/useScrollPosition.jsx"],"names":["useRef","useLayoutEffect","isBrowser","window","getScrollPosition","element","useWindow","x","y","target","current","document","body","position","getBoundingClientRect","scrollX","scrollY","left","top","useScrollPosition","effect","deps","wait","throttleTimeout","callBack","currPos","prevPos","handleScroll","setTimeout","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,eAAjB,QAAwC,OAAxC;AAEA,MAAMC,SAAS,GAAG,OAAOC,MAAP,KAAmB,WAArC;;AAEA,SAASC,iBAAT,CAA2B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAA3B,EAAmD;AACjD,MAAI,CAACJ,SAAL,EAAgB,OAAO;AAAEK,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAP;AAEhB,QAAMC,MAAM,GAAGJ,OAAO,GAAGA,OAAO,CAACK,OAAX,GAAqBC,QAAQ,CAACC,IAApD;AACA,QAAMC,QAAQ,GAAGJ,MAAM,CAACK,qBAAP,EAAjB;AAEA,SAAOR,SAAS,GACZ;AAAEC,IAAAA,CAAC,EAAEJ,MAAM,CAACY,OAAZ;AAAqBP,IAAAA,CAAC,EAAEL,MAAM,CAACa;AAA/B,GADY,GAEZ;AAAET,IAAAA,CAAC,EAAEM,QAAQ,CAACI,IAAd;AAAoBT,IAAAA,CAAC,EAAEK,QAAQ,CAACK;AAAhC,GAFJ;AAGD;;AAED,eAAe,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyChB,OAAzC,EAAkDC,SAAlD,EAA6DgB,IAA7D,EAAmE;AAAA;;AAChF,QAAMT,QAAQ,GAAGb,MAAM,CAACI,iBAAiB,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAAlB,CAAvB;AAEA,MAAIiB,eAAe,GAAGvB,MAAM,CAAC,IAAD,CAA5B;;AAEA,QAAMwB,QAAQ,GAAG,MAAM;AACrB,UAAMC,OAAO,GAAGrB,iBAAiB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,CAAjC;AACAc,IAAAA,MAAM,CAAC;AAAEM,MAAAA,OAAO,EAAEb,QAAQ,CAACH,OAApB;AAA6Be,MAAAA;AAA7B,KAAD,CAAN;AACAZ,IAAAA,QAAQ,CAACH,OAAT,GAAmBe,OAAnB;AACAF,IAAAA,eAAe,GAAG,IAAlB;AACD,GALD;;AAOAtB,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAM0B,YAAY,GAAG,MAAM;AACzB,UAAIL,IAAJ,EAAU;AACR,YAAIC,eAAe,CAACb,OAAhB,KAA4B,IAAhC,EAAsC;AACpCa,UAAAA,eAAe,CAACb,OAAhB,GAA0BkB,UAAU,CAACJ,QAAD,EAAWF,IAAX,CAApC;AACD;AACF,OAJD,MAIO;AACLE,QAAAA,QAAQ;AACT;AACF,KARD;;AAUArB,IAAAA,MAAM,CAAC0B,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AAEA,WAAO,MAAMxB,MAAM,CAAC2B,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC,CAAb;AACD,GAdc,CAAf;AAeD;;GA3BuBR,iB","sourcesContent":["import { useRef, useLayoutEffect } from 'react'\r\n\r\nconst isBrowser = typeof window !== `undefined`\r\n\r\nfunction getScrollPosition({ element, useWindow }) {\r\n  if (!isBrowser) return { x: 0, y: 0 }\r\n\r\n  const target = element ? element.current : document.body\r\n  const position = target.getBoundingClientRect()\r\n\r\n  return useWindow\r\n    ? { x: window.scrollX, y: window.scrollY }\r\n    : { x: position.left, y: position.top }\r\n}\r\n\r\nexport default function useScrollPosition(effect, deps, element, useWindow, wait) {\r\n  const position = useRef(getScrollPosition({ useWindow }))\r\n\r\n  let throttleTimeout = useRef(null)\r\n\r\n  const callBack = () => {\r\n    const currPos = getScrollPosition({ element, useWindow })\r\n    effect({ prevPos: position.current, currPos })\r\n    position.current = currPos\r\n    throttleTimeout = null\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    const handleScroll = () => {\r\n      if (wait) {\r\n        if (throttleTimeout.current === null) {\r\n          throttleTimeout.current = setTimeout(callBack, wait)\r\n        }\r\n      } else {\r\n        callBack()\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll)\r\n\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}